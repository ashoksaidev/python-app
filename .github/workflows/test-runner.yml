name: deploy docker via jfrog (vault oidc)


on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "App image tag"
        default: "1.0.0"
        required: true
      environment:
        description: "Target environment"
        default: "dev"
        required: true

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  JFROG_SUBDOMAIN: trialbgccpz          # change if different
  JFROG_DOCKER_REPO: docker             # virtual repo name
  APP_IMAGE_NAME: hello-world           # image name in JFrog

jobs:
  build_sanity:
    name: ci: quick sanity
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 3
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: verify
        run: |
          set -euo pipefail
          echo "sha=$GITHUB_SHA"
          echo "ok"

  deploy_docker:
    name: cd: pull & run container
    needs: build_sanity
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 5
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: vault: read jfrog creds (oidc)
        id: vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}          # e.g. http://127.0.0.1:8200 or https://vault.example.com:8200
          method: jwt
          role: gh-actions-poc
          secrets: |
            kv/data/jfrog username | JFROG_USER ;
            kv/data/jfrog token    | JFROG_TOKEN

      - name: jfrog: docker login
        run: |
          set -euo pipefail
          echo "${{ steps.vault.outputs.JFROG_TOKEN }}" | docker login \
            "${{ env.JFROG_SUBDOMAIN }}.jfrog.io" \
            -u "${{ steps.vault.outputs.JFROG_USER }}" \
            --password-stdin

      - name: artifact: pull image
        run: |
          set -euo pipefail
          IMAGE="${{ env.JFROG_SUBDOMAIN }}.jfrog.io/${{ env.JFROG_DOCKER_REPO }}/${{ env.APP_IMAGE_NAME }}:${{ inputs.image_tag }}"
          echo "IMAGE=$IMAGE" >> "$GITHUB_ENV"
          docker pull "$IMAGE"

      - name: deploy: run container
        run: |
          set -euo pipefail
          docker rm -f python-app || true
          docker run -d --name python-app \
            -e APP_ENV="${{ inputs.environment }}" \
            "$IMAGE"

      - name: post-deploy: status
        run: |
          set -euo pipefail
          docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
