name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/test-runner.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  VAULT_ADDR: http://127.0.0.1:8212
  VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
  HEALTH_URL: https://${{ secrets.AZURE_WEBAPP_NAME }}.azurewebsites.net/health
  IMAGE_NAME: hello-world

jobs:
  build-deploy:
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: |
          pytest || echo "No tests found"

      - name: Inspect GitHub OIDC token
        run: |
          TOKEN_URL="${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=https://github.com/${{ github.repository_owner }}"
          IDTOKEN="$(curl -s -H "Authorization: bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" "$TOKEN_URL")"
          PAYLOAD="$(echo "$IDTOKEN" | cut -d '.' -f2 | base64 -d 2>/dev/null)"
          echo "Decoded OIDC token payload:"
          echo "$PAYLOAD" | jq

      - name: Authenticate with Vault (OIDC)
        id: vault
        uses: hashicorp/vault-action@v3
        with:
          url: http://127.0.0.1:8212
          method: jwt
          path: jwt
          role: gh-actions
          jwtGithubAudience: https://github.com/${{ github.repository_owner }}
          namespace: ${{ env.VAULT_NAMESPACE }}
          exportEnv: true
          secrets: |
            ci/data/artifactory url          | ART_URL;
            ci/data/artifactory repo_docker  | ART_DOCKER_REPO;
            ci/data/artifactory username     | ART_USER;
            ci/data/artifactory password     | ART_PASSWORD

      - name: Docker login to JFrog
        run: echo "$ART_PASSWORD" | docker login "$ART_URL" -u "$ART_USER" --password-stdin

      - name: Build Docker image
        run: docker build -t "$IMAGE_NAME:ci" .

      - name: Scan image for vulnerabilities
        run: |
          curl -sSfL https://raw
