name: Deploy FastAPI Application

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install required tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Load Artifactory secrets from GitHub
        shell: bash
        run: |
          echo "ARTIFACTORY_URL=${{ secrets.ARTIFACTORY_URL }}" >> $GITHUB_ENV
          echo "ARTIFACTORY_USERNAME=${{ secrets.ARTIFACTORY_USERNAME }}" >> $GITHUB_ENV
          echo "::add-mask::${{ secrets.ARTIFACTORY_PASSWORD }}"
          echo "ARTIFACTORY_PASSWORD=${{ secrets.ARTIFACTORY_PASSWORD }}" >> $GITHUB_ENV
          echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" >> $GITHUB_ENV

      - name: Authenticate with Vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          path: jwt
          role: gh-actions
          jwtGithubAudience: https://github.com/ashoksaidev
          exportToken: true

      - name: Load secrets from Vault (fallback)
        shell: bash
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
        run: |
          curl -sS -H "X-Vault-Token: $VAULT_TOKEN" -H "X-Vault-Namespace: ${VAULT_NAMESPACE:-}" \
            "$VAULT_ADDR/v1/ci/data/artifactory" > secret.json

          echo "ARTIFACTORY_URL=$(jq -r '.data.data.url' secret.json)" >> $GITHUB_ENV
          echo "ARTIFACTORY_USERNAME=$(jq -r '.data.data.username' secret.json)" >> $GITHUB_ENV
          PW=$(jq -r '.data.data.password' secret.json)
          echo "::add-mask::$PW"
          echo "ARTIFACTORY_PASSWORD=$PW" >> $GITHUB_ENV
          echo "DOCKER_REPO=$(jq -r '.data.data.repo_docker' secret.json)" >> $GITHUB_ENV

      - name: Verify Artifactory credentials
        shell: bash
        run: |
          for var in ARTIFACTORY_URL ARTIFACTORY_USERNAME ARTIFACTORY_PASSWORD DOCKER_REPO; do
            if [[ -z "${!var}" ]]; then
              echo "Missing $var"
              exit 1
            fi
          done

          HOST="${ARTIFACTORY_URL#http://}"
          HOST="${HOST#https://}"
          HOST="${HOST%%/*}"
          echo "REGISTRY_HOST=$HOST" >> $GITHUB_ENV

          curl -s -o /dev/null -w "%{http_code}" \
            -u "$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD" \
            "https://$HOST/artifactory/api/system/ping" | grep -q 200 || {
              echo "Artifactory authentication failed"
              exit 1
            }

      - name: Build and push Docker image
        shell: bash
        run: |
          echo "$ARTIFACTORY_PASSWORD" | docker login "$REGISTRY_HOST" -u "$ARTIFACTORY_USERNAME" --password-stdin
          IMAGE="$REGISTRY_HOST/$DOCKER_REPO/fastapi-app:${GITHUB_SHA}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

    outputs:
      image: ${{ steps.build-and-push.outputs.IMAGE }}
      registry_host: ${{ env.REGISTRY_HOST }}

  deploy:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy container to Azure Web App
        shell: bash
        env:
          WEBAPP: ${{ secrets.AZURE_WEBAPP_NAME }}
          RG: ${{ secrets.AZURE_RESOURCE_GROUP }}
          IMAGE: ${{ needs.build.outputs.image }}
          REGISTRY_HOST: ${{ needs.build.outputs.registry_host }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          az webapp config appsettings set \
            --name "$WEBAPP" \
            --resource-group "$RG" \
            --settings WEBSITES_PORT=8080

          az webapp config container set \
            --name "$WEBAPP" \
            --resource-group "$RG" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "https://$REGISTRY_HOST" \
            --docker-registry-server-user "$ARTIFACTORY_USERNAME" \
            --docker-registry-server-password "$ARTIFACTORY_PASSWORD"

          az webapp restart --name "$WEBAPP" --resource-group "$RG"
