name: Deploy FastAPI Application

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy to Azure Web App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update -y && sudo apt-get install -y jq curl

      # Load secrets from GitHub if available
      - name: Load Artifactory secrets from GitHub
        shell: bash
        run: |
          for var in ARTIFACTORY_URL ARTIFACTORY_USERNAME ARTIFACTORY_PASSWORD DOCKER_REPO; do
            [[ -n "${{ secrets[$var] }}" ]] && echo "$var=${{ secrets[$var] }}" >> "$GITHUB_ENV"
          done
          echo "::add-mask::${{ secrets.ARTIFACTORY_PASSWORD }}"

      # Authenticate to Vault and fallback to Vault secrets if needed
      - name: Vault OIDC Authentication
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          path: jwt
          role: gh-actions
          jwtGithubAudience: https://github.com/ashoksaidev
          exportToken: true

      - name: Load secrets from Vault (fallback)
        shell: bash
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
        run: |
          curl -sS -H "X-Vault-Token: $VAULT_TOKEN" -H "X-Vault-Namespace: ${VAULT_NAMESPACE:-}" \
            "$VAULT_ADDR/v1/ci/data/artifactory" > secret.json
          for var in url username password repo_docker; do
            [[ -z "${!var^^}" ]] && echo "${var^^}=$(jq -r ".data.data.$var" secret.json)" >> "$GITHUB_ENV"
          done
          echo "::add-mask::$(jq -r '.data.data.password' secret.json)"

      - name: Verify Artifactory access
        shell: bash
        run: |
          for v in ARTIFACTORY_URL ARTIFACTORY_USERNAME ARTIFACTORY_PASSWORD DOCKER_REPO; do
            [[ -z "${!v}" ]] && { echo "Missing $v"; exit 1; }
          done
          HOST="${ARTIFACTORY_URL#http://}"; HOST="${HOST#https://}"; HOST="${HOST%%/*}"
          echo "REGISTRY_HOST=$HOST" >> "$GITHUB_ENV"
          curl -s -o /dev/null -w "%{http_code}" \
            -u "$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD" \
            "https://$HOST/artifactory/api/system/ping" | grep -q 200 || {
              echo "Artifactory auth failed"; exit 1;
            }

      - name: Build and push Docker image
        shell: bash
        run: |
          echo "$ARTIFACTORY_PASSWORD" | docker login "$REGISTRY_HOST" -u "$ARTIFACTORY_USERNAME" --password-stdin
          IMAGE="$REGISTRY_HOST/$DOCKER_REPO/fastapi-app:${GITHUB_SHA}"
          echo "IMAGE=$IMAGE" >> "$GITHUB_ENV"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App
        shell: bash
        env:
          WEBAPP: ${{ secrets.AZURE_WEBAPP_NAME }}
          RG: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          az webapp config appsettings set \
            --name "$WEBAPP" \
            --resource-group "$RG" \
            --settings WEBSITES_PORT=8080
          az webapp config container set \
            --name "$WEBAPP" --resource-group "$RG" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "https://$REGISTRY_HOST" \
            --docker-registry-server-user "$ARTIFACTORY_USERNAME" \
            --docker-registry-server-password "$ARTIFACTORY_PASSWORD"
          az webapp restart --name "$WEBAPP" --resource-group "$RG"
