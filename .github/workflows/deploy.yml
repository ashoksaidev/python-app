name: Deploy FastAPI Application

on:
  push:
    branches:
      - main   # 🚀 Auto deploy whenever code is pushed to main branch

permissions:
  id-token: write
  contents: read

jobs:
  deploy_application:
    name: Deploy Docker Image to VM or Azure Web App
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # Step 2: Install Vault CLI (needed to interact with Vault if required later)
      - name: Install Vault CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip curl
          curl -fsSL https://releases.hashicorp.com/vault/1.20.2/vault_1.20.2_linux_amd64.zip -o vault.zip
          unzip vault.zip
          sudo mv vault /usr/local/bin/
          vault --version

      # Step 3: Retrieve Artifactory credentials from Vault
      - name: Retrieve Artifactory Credentials from Vault
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          path: jwt
          role: gh-actions
          jwtGithubAudience: https://github.com/ashoksaidev
          exportEnv: true
          secrets: |
            ci/artifactory url | ARTIFACTORY_URL
            ci/artifactory repo_docker | DOCKER_REPO
            ci/artifactory username | ARTIFACTORY_USER
            ci/artifactory password | ARTIFACTORY_PASSWORD

      # Step 4: Docker login to JFrog
      - name: Docker Login to JFrog
        run: |
          echo "$ARTIFACTORY_PASSWORD" | docker login "$ARTIFACTORY_URL" -u "$ARTIFACTORY_USER" --password-stdin

      # Step 5: Build FastAPI Docker Image
      - name: Build Docker Image
        run: |
          IMAGE="$ARTIFACTORY_URL/$DOCKER_REPO/fastapi-app:${GITHUB_SHA}"
          echo "Building image: $IMAGE"
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      # Step 6: Push Docker image to JFrog
      - name: Push Docker Image to JFrog
        run: docker push $IMAGE

      # Step 7: Deploy to Azure VM
      - name: Deploy to Azure VM
        if: always()
        run: |
          [[ -z "${{ secrets.VM_HOST }}" || -z "${{ secrets.VM_USER }}" ]] && echo "❌ Missing VM host/user" && exit 1
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" \
            "docker login $ARTIFACTORY_URL -u $ARTIFACTORY_USER -p '$ARTIFACTORY_PASSWORD' && \
             docker pull $IMAGE && \
             docker stop fastapi-app || true && docker rm fastapi-app || true && \
             docker run -d --name fastapi-app -p 80:80 $IMAGE"

      # Step 8: Deploy to Azure Web App
      - name: Log In to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App
        run: |
          az webapp config container set \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "https://$ARTIFACTORY_URL" \
            --docker-registry-server-user "$ARTIFACTORY_USER" \
            --docker-registry-server-password "$ARTIFACTORY_PASSWORD"
          az webapp restart \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"
