name: Deploy Application

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag (full path or tag) to deploy'
        required: true
      deploy_target:
        description: 'Deployment environment: vm | azure_webapp'
        required: true
        default: 'vm'
      vm_host:
        description: 'Target VM hostname or IP address'
        required: false
      vm_user:
        description: 'SSH username for target VM'
        required: false
      azure_resource_group:
        description: 'Azure Resource Group name'
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  deploy_application:
    name: Build, Push, and Deploy Docker Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ secrets.ARTIFACTORY_URL }}/${{ secrets.DOCKER_REPO }}/myapp:${{ github.sha }} .

      # Step 3: Push image to JFrog
      - name: Push Docker image to JFrog
        run: |
          echo "${{ secrets.ARTIFACTORY_PASSWORD }}" | docker login "${{ secrets.ARTIFACTORY_URL }}" -u "${{ secrets.ARTIFACTORY_USER }}" --password-stdin
          docker push ${{ secrets.ARTIFACTORY_URL }}/${{ secrets.DOCKER_REPO }}/myapp:${{ github.sha }}
          echo "IMAGE=${{ secrets.ARTIFACTORY_URL }}/${{ secrets.DOCKER_REPO }}/myapp:${{ github.sha }}" >> $GITHUB_ENV

      # Step 4: Validate image tag
      - name: Validate image tag input
        run: |
          if [ -z "${{ github.event.inputs.image_tag }}" ]; then
            echo "Using newly built image: $IMAGE"
          else
            echo "Using provided image: ${{ github.event.inputs.image_tag }}"
            echo "IMAGE=${{ github.event.inputs.image_tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      # Step 5: Deploy to Virtual Machine
      - name: Deploy to Virtual Machine
        if: ${{ github.event.inputs.deploy_target == 'vm' }}
        run: |
          [[ -z "${{ github.event.inputs.vm_host }}" || -z "${{ github.event.inputs.vm_user }}" ]] && echo "❌ Missing VM host/user for VM deployment" && exit 1
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "${{ github.event.inputs.vm_user }}@${{ github.event.inputs.vm_host }}" \
            "docker login ${{ secrets.ARTIFACTORY_URL }} -u ${{ secrets.ARTIFACTORY_USER }} -p '${{ secrets.ARTIFACTORY_PASSWORD }}' && \
             docker pull $IMAGE && \
             docker stop app || true && docker rm app || true && \
             docker run -d --name app -p 80:80 $IMAGE"

      # Step 6: Azure CLI login
      - name: Azure CLI login
        if: ${{ github.event.inputs.deploy_target == 'azure_webapp' }}
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 7: Deploy to Azure Web App
      - name: Deploy to Azure Web App
        if: ${{ github.event.inputs.deploy_target == 'azure_webapp' }}
        run: |
          az webapp config container set \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ github.event.inputs.azure_resource_group || secrets.AZURE_RESOURCE_GROUP }}" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "${{ secrets.ARTIFACTORY_URL }}" \
            --docker-registry-server-user "${{ secrets.ARTIFACTORY_USER }}" \
            --docker-registry-server-password "${{ secrets.ARTIFACTORY_PASSWORD }}"
          az webapp restart \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ github.event.inputs.azure_resource_group || secrets.AZURE_RESOURCE_GROUP }}"
