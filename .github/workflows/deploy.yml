name: Deploy FastAPI Application

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy_application:
    name: Deploy Docker Image to VM or Azure Web App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      # Install Vault CLI (handy for local testing / fallback)
      - name: Install Vault CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg lsb-release software-properties-common jq
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update -y
          sudo apt-get install -y vault
          vault --version

      # ✅ Recommended: get a short-lived Vault token via GitHub OIDC and read the secret
      - name: Retrieve Artifactory Credentials from Vault (OIDC)
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          path: jwt
          role: gh-actions
          # set this to match the audience your Vault role expects
          jwtGithubAudience: https://github.com/ashoksaidev
          exportEnv: true
          secrets: |
            ci/data/artifactory url | ARTIFACTORY_URL
            ci/data/artifactory repo_docker | DOCKER_REPO
            ci/data/artifactory username | ARTIFACTORY_USER
            ci/data/artifactory password | ARTIFACTORY_PASSWORD

      # --- If you MUST keep a static token, use this instead of the step above ---
      # - name: Retrieve Artifactory Credentials from Vault (curl, no sys mounts)
      #   env:
      #     VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
      #     VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
      #     VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
      #   run: |
      #     set -euo pipefail
      #     curl -sS \
      #       -H "X-Vault-Token: $VAULT_TOKEN" \
      #       -H "X-Vault-Namespace: $VAULT_NAMESPACE" \
      #       "$VAULT_ADDR/v1/ci/data/artifactory" > secret.json
      #     echo "ARTIFACTORY_URL=$(jq -r '.data.data.url' secret.json)" >> $GITHUB_ENV
      #     echo "DOCKER_REPO=$(jq -r '.data.data.repo_docker' secret.json)" >> $GITHUB_ENV
      #     echo "ARTIFACTORY_USER=$(jq -r '.data.data.username' secret.json)" >> $GITHUB_ENV
      #     echo "ARTIFACTORY_PASSWORD=$(jq -r '.data.data.password' secret.json)" >> $GITHUB_ENV
      #     echo "::add-mask::$(jq -r '.data.data.password' secret.json)"
      # -------------------------------------------------------------------------

      - name: Docker Login to JFrog
        run: |
          echo "$ARTIFACTORY_PASSWORD" | docker login "$ARTIFACTORY_URL" -u "$ARTIFACTORY_USER" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE="$ARTIFACTORY_URL/$DOCKER_REPO/fastapi-app:${GITHUB_SHA}"
          echo "Building image: $IMAGE"
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker Image to JFrog
        run: docker push "$IMAGE"

      - name: Deploy to Azure VM
        if: always()
        run: |
          [[ -z "${{ secrets.VM_HOST }}" || -z "${{ secrets.VM_USER }}" ]] && echo "❌ Missing VM host/user" && exit 1
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" \
            "set -e; \
             echo '$ARTIFACTORY_PASSWORD' | docker login '$ARTIFACTORY_URL' -u '$ARTIFACTORY_USER' --password-stdin; \
             docker pull '$IMAGE'; \
             (docker stop fastapi-app || true); (docker rm fastapi-app || true); \
             docker run -d --name fastapi-app -p 80:80 '$IMAGE'"

      - name: Log In to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App
        run: |
          az webapp config container set \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "https://$ARTIFACTORY_URL" \
            --docker-registry-server-user "$ARTIFACTORY_USER" \
            --docker-registry-server-password "$ARTIFACTORY_PASSWORD"
          az webapp restart \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"
