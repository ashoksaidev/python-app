name: Deploy FastAPI Application

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy FastAPI App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update -y && sudo apt-get install -y jq curl

      - name: Load Artifactory from GitHub Secrets
        run: |
          [ -n "${{ secrets.ARTIFACTORY_URL }}" ] && echo "ARTIFACTORY_URL=${{ secrets.ARTIFACTORY_URL }}" >> $GITHUB_ENV
          [ -n "${{ secrets.ARTIFACTORY_USERNAME }}" ] && echo "ARTIFACTORY_USERNAME=${{ secrets.ARTIFACTORY_USERNAME }}" >> $GITHUB_ENV
          [ -n "${{ secrets.ARTIFACTORY_PASSWORD }}" ] && { echo "::add-mask::${{ secrets.ARTIFACTORY_PASSWORD }}"; echo "ARTIFACTORY_PASSWORD=${{ secrets.ARTIFACTORY_PASSWORD }}" >> $GITHUB_ENV; }
          [ -n "${{ secrets.DOCKER_REPO }}" ] && echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" >> $GITHUB_ENV

      - name: Authenticate to Vault (OIDC)
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          path: jwt
          role: gh-actions
          jwtGithubAudience: https://github.com/ashoksaidev
          exportToken: true

      - name: Load Artifactory from Vault (fallback)
        run: |
          API="${{ secrets.VAULT_ADDR }}/v1/ci/data/artifactory"
          curl -sS -H "X-Vault-Token: $VAULT_TOKEN" "$API" > secret.json
          [ -z "$ARTIFACTORY_URL" ]      && echo "ARTIFACTORY_URL=$(jq -r '.data.data.url' secret.json)" >> $GITHUB_ENV
          [ -z "$ARTIFACTORY_USERNAME" ] && echo "ARTIFACTORY_USERNAME=$(jq -r '.data.data.username' secret.json)" >> $GITHUB_ENV
          [ -z "$ARTIFACTORY_PASSWORD" ] && { pw=$(jq -r '.data.data.password' secret.json); echo "::add-mask::$pw"; echo "ARTIFACTORY_PASSWORD=$pw" >> $GITHUB_ENV; }
          [ -z "$DOCKER_REPO" ]          && echo "DOCKER_REPO=$(jq -r '.data.data.repo_docker' secret.json)" >> $GITHUB_ENV

      - name: Docker login to JFrog
        run: |
          HOST="${ARTIFACTORY_URL#http://}"; HOST="${HOST#https://}"; HOST="${HOST%%/*}"
          echo "REGISTRY_HOST=$HOST" >> $GITHUB_ENV
          echo "$ARTIFACTORY_PASSWORD" | docker login "$HOST" -u "$ARTIFACTORY_USERNAME" --password-stdin

      - name: Build and push image
        run: |
          IMAGE="$REGISTRY_HOST/$DOCKER_REPO/fastapi-app:${GITHUB_SHA}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Deploy on Azure VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh && echo "$VM_SSH_KEY" > ~/.ssh/deploy_key && chmod 600 ~/.ssh/deploy_key
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "$VM_USER@$VM_HOST" "
            docker login $REGISTRY_HOST -u $ARTIFACTORY_USERNAME -p '$ARTIFACTORY_PASSWORD'
            docker pull $IMAGE
            docker stop fastapi-app || true && docker rm fastapi-app || true
            docker run -d --name fastapi-app -p 80:8080 $IMAGE
          "

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App
        env:
          WEBAPP: ${{ secrets.AZURE_WEBAPP_NAME }}
          RG: ${{ secrets.AZURE_RESOURCE_GROUP }}
        run: |
          az webapp config appsettings set --name "$WEBAPP" --resource-group "$RG" --settings WEBSITES_PORT=8080
          az webapp config container set \
            --name "$WEBAPP" \
            --resource-group "$RG" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "https://$REGISTRY_HOST" \
            --docker-registry-server-user "$ARTIFACTORY_USERNAME" \
            --docker-registry-server-password "$ARTIFACTORY_PASSWORD"
          az webapp restart --name "$WEBAPP" --resource-group "$RG"
