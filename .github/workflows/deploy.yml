name: Deploy FastAPI Application

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  deploy_application:
    name: Deploy Docker Image to VM or Azure Web App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Install Vault CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg lsb-release software-properties-common jq
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update -y
          sudo apt-get install -y vault
          vault --version

      # Get short-lived VAULT_TOKEN via GitHub OIDC
      - name: Authenticate to Vault (OIDC)
        uses: hashicorp/vault-action@v3
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: jwt
          path: jwt
          role: gh-actions
          jwtGithubAudience: https://github.com/ashoksaidev
          exportToken: true

      # Read KV secret and export all keys (expects: url, repo_docker, username, password)
      - name: Load Artifactory credentials from Vault
        env:
          VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
          VAULT_NAMESPACE: ${{ secrets.VAULT_NAMESPACE }}
          VAULT_KV_MOUNT: ${{ vars.VAULT_KV_MOUNT || 'ci' }}
          VAULT_SECRET_PATH: ${{ vars.VAULT_SECRET_PATH || 'artifactory' }}
        run: |
          set -euo pipefail
          API="$VAULT_ADDR/v1/$VAULT_KV_MOUNT/data/$VAULT_SECRET_PATH"
          curl -sS \
            -H "X-Vault-Token: $VAULT_TOKEN" \
            -H "X-Vault-Namespace: ${VAULT_NAMESPACE:-}" \
            "$API" > secret.json

          # Export each key as ARTIFACTORY_<UPPERCASE_KEY>=value for later steps
          jq -r '.data.data | to_entries[] | "\(.key)=\(.value)"' secret.json | \
          while IFS='=' read -r k v; do
            KEY_UP=$(echo "$k" | tr '[:lower:]' '[:upper:]')
            [[ "$KEY_UP" =~ ^ARTIFACTORY_ ]] || KEY_UP="ARTIFACTORY_$KEY_UP"
            echo "::add-mask::$v"
            echo "$KEY_UP=$v" >> "$GITHUB_ENV"
          done

          # Also set DOCKER_REPO from repo_docker if present
          REPO=$(jq -r '.data.data.repo_docker // empty' secret.json)
          if [ -n "$REPO" ]; then
            echo "DOCKER_REPO=$REPO" >> "$GITHUB_ENV"
          fi

      - name: Validate required env vars
        run: |
          set -e
          missing=0
          for v in ARTIFACTORY_URL ARTIFACTORY_USERNAME ARTIFACTORY_PASSWORD DOCKER_REPO; do
            if [ -z "${!v:-}" ]; then
              echo "❌ Missing required variable: $v"
              missing=1
            fi
          done
          if [ $missing -ne 0 ]; then
            exit 1
          fi

      # Ensure ARTIFACTORY_URL is host-only and creds work
      - name: Normalize registry & validate Artifactory creds
        run: |
          set -euo pipefail
          RAW="$ARTIFACTORY_URL"
          REGISTRY_HOST="${RAW#http://}"; REGISTRY_HOST="${REGISTRY_HOST#https://}"
          REGISTRY_HOST="${REGISTRY_HOST%%/*}"
          echo "REGISTRY_HOST=$REGISTRY_HOST" >> "$GITHUB_ENV"

          # Quick auth ping; expects 200 when username + access token are valid
          set +e
          PING_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -u "$ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD" \
            "https://$REGISTRY_HOST/artifactory/api/system/ping")
          set -e
          if [ "$PING_CODE" != "200" ]; then
            echo "❌ Artifactory auth ping failed (HTTP $PING_CODE)."
            echo "   Check Vault: url(host only), username(ci-user), password(Access Token)."
            exit 1
          fi
          echo "✅ Artifactory auth ping OK"

      - name: Docker Login to JFrog
        run: |
          echo "$ARTIFACTORY_PASSWORD" | docker login "$REGISTRY_HOST" -u "$ARTIFACTORY_USERNAME" --password-stdin

      - name: Build Docker Image
        run: |
          IMAGE="$REGISTRY_HOST/$DOCKER_REPO/fastapi-app:${GITHUB_SHA}"
          echo "Building image: $IMAGE"
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Push Docker Image to JFrog
        run: docker push "$IMAGE"

      - name: Deploy to Azure VM
        if: always()
        run: |
          [[ -z "${{ secrets.VM_HOST }}" || -z "${{ secrets.VM_USER }}" ]] && echo "❌ Missing VM host/user" && exit 1
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy_key "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" \
            "set -e; \
             echo '$ARTIFACTORY_PASSWORD' | docker login '$REGISTRY_HOST' -u '$ARTIFACTORY_USERNAME' --password-stdin; \
             docker pull '$IMAGE'; \
             (docker stop fastapi-app || true); (docker rm fastapi-app || true); \
             docker run -d --name fastapi-app -p 80:80 '$IMAGE'"

      - name: Log In to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Azure Web App
        run: |
          az webapp config container set \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}" \
            --docker-custom-image-name "$IMAGE" \
            --docker-registry-server-url "https://$REGISTRY_HOST" \
            --docker-registry-server-user "$ARTIFACTORY_USERNAME" \
            --docker-registry-server-password "$ARTIFACTORY_PASSWORD"
          az webapp restart \
            --name "${{ secrets.AZURE_WEBAPP_NAME }}" \
            --resource-group "${{ secrets.AZURE_RESOURCE_GROUP }}"
